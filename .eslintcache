[{"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\index.tsx":"1","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\reportWebVitals.ts":"2","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\store.tsx":"3","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\reducers\\counterReducer.tsx":"4","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\actionTypes\\actionTypes.tsx":"5","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\app.tsx":"6","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\project\\project.tsx":"7","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\home\\home.tsx":"8","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\project\\project-list.tsx":"9","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\actions\\index.tsx":"10"},{"size":1248,"mtime":1608691656169,"results":"11","hashOfConfig":"12"},{"size":467,"mtime":1608056133408,"results":"13","hashOfConfig":"12"},{"size":552,"mtime":1608683603914,"results":"14","hashOfConfig":"12"},{"size":683,"mtime":1608684214338,"results":"15","hashOfConfig":"12"},{"size":291,"mtime":1608053224782,"results":"16","hashOfConfig":"12"},{"size":807,"mtime":1608690713804,"results":"17","hashOfConfig":"12"},{"size":121,"mtime":1608083427977,"results":"18","hashOfConfig":"12"},{"size":2218,"mtime":1608691195145,"results":"19","hashOfConfig":"12"},{"size":132,"mtime":1608068667295,"results":"20","hashOfConfig":"12"},{"size":565,"mtime":1608684214328,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1d7ipa0",{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\index.tsx",[],[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\reportWebVitals.ts",["45"],"import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\store.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\reducers\\counterReducer.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\actionTypes\\actionTypes.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\app.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\project\\project.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\home\\home.tsx",["46","47","48"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../../store/store';\nimport { Actions, increment } from '../../store/actions';\nimport Button from 'react-bootstrap/Button';\nimport './home.scss';\nimport { ThunkAction, ThunkDispatch } from 'redux-thunk';\n\nconst Home: React.FC = () => {\n    const counter: number = useSelector((state: RootState) => state.CounterState.Counter);\n    const dispatch = useDispatch();\n\n    // directly call actions\n    // dont use action-creators (redux thunk)\n    // synchronously\n    // in onClick: incrementAsync\n    function onIncrementCounter(): Actions {\n        return dispatch(increment());\n    }\n\n    type ThunkResult<R> = ThunkAction<R, RootState, undefined, Actions>;\n\n    // redux-Thunk action-creator\n    // so it returns no action (aka single object) but a function which returns this action (object)\n    // \"Redux Thunk middleware allows you to write action creators that return a function instead of an action.\"\n    // in onClick: () => dispatch(incrementAsync())\n    // how does thunk now if it being used or not (maybe used dispatch directly...)\n    //  - similar question: What is the main difference to \"non-thunk\"\n    //  - = example without thunk:  handleIncrementClick: () => dispatch({ type: 'INCREMENT' })\n    //  -   example with thunk:     handleIncrementClick: () => dispatch(innerDispatch => innerDispatch({ type: 'INCREMENT' }))\n    //      - main-difference: dispatch does not get/return a plain object but a function\n    function incrementAsync(): ThunkResult<void> {\n        // https://stackoverflow.com/questions/52977666/correct-typescript-type-for-thunk-dispatch\n        return async (dispatch, getState) => {\n            // const state = getState();\n            // console.log(state.CounterState.Counter);\n            // example async call: axios.get(`https://reqres.in/api/users`)\n            setTimeout(() => {\n                dispatch(increment());\n            }, 0);\n        };\n    }\n\n    return (\n        <div className=\"home\">\n            <h1>Counter: {counter}</h1>\n            <Button onClick={() => dispatch(incrementAsync())}>+</Button>\n        </div>\n    );\n};\n\nexport default Home;\n","C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\domain\\project\\project-list.tsx",[],"C:\\Users\\Florian\\Desktop\\github\\homepage\\src\\store\\actions\\index.tsx",[],{"ruleId":"49","severity":1,"message":"50","line":3,"column":25,"nodeType":"51","messageId":"52","endLine":3,"endColumn":57},{"ruleId":"53","severity":1,"message":"54","line":7,"column":23,"nodeType":"55","messageId":"56","endLine":7,"endColumn":36},{"ruleId":"53","severity":1,"message":"57","line":17,"column":14,"nodeType":"55","messageId":"56","endLine":17,"endColumn":32},{"ruleId":"53","severity":1,"message":"58","line":34,"column":33,"nodeType":"55","messageId":"56","endLine":34,"endColumn":41},"@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","ArrowFunctionExpression","missingReturnType","@typescript-eslint/no-unused-vars","'ThunkDispatch' is defined but never used.","Identifier","unusedVar","'onIncrementCounter' is defined but never used.","'getState' is defined but never used."]